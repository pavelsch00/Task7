#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Epam_Task7
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Students")]
	public partial class StudentsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertEducationalSubjects(EducationalSubjects instance);
    partial void UpdateEducationalSubjects(EducationalSubjects instance);
    partial void DeleteEducationalSubjects(EducationalSubjects instance);
    partial void InsertExaminers(Examiners instance);
    partial void UpdateExaminers(Examiners instance);
    partial void DeleteExaminers(Examiners instance);
    partial void InsertGroups(Groups instance);
    partial void UpdateGroups(Groups instance);
    partial void DeleteGroups(Groups instance);
    partial void InsertSessionEducationalSubjects(SessionEducationalSubjects instance);
    partial void UpdateSessionEducationalSubjects(SessionEducationalSubjects instance);
    partial void DeleteSessionEducationalSubjects(SessionEducationalSubjects instance);
    partial void InsertSessions(Sessions instance);
    partial void UpdateSessions(Sessions instance);
    partial void DeleteSessions(Sessions instance);
    partial void InsertSpecialtys(Specialtys instance);
    partial void UpdateSpecialtys(Specialtys instance);
    partial void DeleteSpecialtys(Specialtys instance);
    partial void InsertStudentResults(StudentResults instance);
    partial void UpdateStudentResults(StudentResults instance);
    partial void DeleteStudentResults(StudentResults instance);
    partial void InsertStudents(Students instance);
    partial void UpdateStudents(Students instance);
    partial void DeleteStudents(Students instance);
    #endregion
		
		public StudentsDataContext() : 
				base(global::Epam_Task7.Properties.Settings.Default.StudentsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public StudentsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StudentsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StudentsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StudentsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<EducationalSubjects> EducationalSubjects
		{
			get
			{
				return this.GetTable<EducationalSubjects>();
			}
		}
		
		public System.Data.Linq.Table<Examiners> Examiners
		{
			get
			{
				return this.GetTable<Examiners>();
			}
		}
		
		public System.Data.Linq.Table<Groups> Groups
		{
			get
			{
				return this.GetTable<Groups>();
			}
		}
		
		public System.Data.Linq.Table<SessionEducationalSubjects> SessionEducationalSubjects
		{
			get
			{
				return this.GetTable<SessionEducationalSubjects>();
			}
		}
		
		public System.Data.Linq.Table<Sessions> Sessions
		{
			get
			{
				return this.GetTable<Sessions>();
			}
		}
		
		public System.Data.Linq.Table<Specialtys> Specialtys
		{
			get
			{
				return this.GetTable<Specialtys>();
			}
		}
		
		public System.Data.Linq.Table<StudentResults> StudentResults
		{
			get
			{
				return this.GetTable<StudentResults>();
			}
		}
		
		public System.Data.Linq.Table<Students> Students
		{
			get
			{
				return this.GetTable<Students>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EducationalSubjects")]
	public partial class EducationalSubjects : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _SubjectName;
		
		private string _SubjectType;
		
		private System.Nullable<int> _ExamainersId;
		
		private EntitySet<SessionEducationalSubjects> _SessionEducationalSubjects;
		
		private EntityRef<Examiners> _Examiners;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubjectNameChanging(string value);
    partial void OnSubjectNameChanged();
    partial void OnSubjectTypeChanging(string value);
    partial void OnSubjectTypeChanged();
    partial void OnExamainersIdChanging(System.Nullable<int> value);
    partial void OnExamainersIdChanged();
    #endregion
		
		public EducationalSubjects()
		{
			this._SessionEducationalSubjects = new EntitySet<SessionEducationalSubjects>(new Action<SessionEducationalSubjects>(this.attach_SessionEducationalSubjects), new Action<SessionEducationalSubjects>(this.detach_SessionEducationalSubjects));
			this._Examiners = default(EntityRef<Examiners>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SubjectName
		{
			get
			{
				return this._SubjectName;
			}
			set
			{
				if ((this._SubjectName != value))
				{
					this.OnSubjectNameChanging(value);
					this.SendPropertyChanging();
					this._SubjectName = value;
					this.SendPropertyChanged("SubjectName");
					this.OnSubjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectType", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SubjectType
		{
			get
			{
				return this._SubjectType;
			}
			set
			{
				if ((this._SubjectType != value))
				{
					this.OnSubjectTypeChanging(value);
					this.SendPropertyChanging();
					this._SubjectType = value;
					this.SendPropertyChanged("SubjectType");
					this.OnSubjectTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamainersId", DbType="Int")]
		public System.Nullable<int> ExamainersId
		{
			get
			{
				return this._ExamainersId;
			}
			set
			{
				if ((this._ExamainersId != value))
				{
					if (this._Examiners.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExamainersIdChanging(value);
					this.SendPropertyChanging();
					this._ExamainersId = value;
					this.SendPropertyChanged("ExamainersId");
					this.OnExamainersIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EducationalSubjects_SessionEducationalSubjects", Storage="_SessionEducationalSubjects", ThisKey="Id", OtherKey="EducationalSubjectId")]
		public EntitySet<SessionEducationalSubjects> SessionEducationalSubjects
		{
			get
			{
				return this._SessionEducationalSubjects;
			}
			set
			{
				this._SessionEducationalSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examiners_EducationalSubjects", Storage="_Examiners", ThisKey="ExamainersId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
		public Examiners Examiners
		{
			get
			{
				return this._Examiners.Entity;
			}
			set
			{
				Examiners previousValue = this._Examiners.Entity;
				if (((previousValue != value) 
							|| (this._Examiners.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Examiners.Entity = null;
						previousValue.EducationalSubjects.Remove(this);
					}
					this._Examiners.Entity = value;
					if ((value != null))
					{
						value.EducationalSubjects.Add(this);
						this._ExamainersId = value.Id;
					}
					else
					{
						this._ExamainersId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Examiners");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SessionEducationalSubjects(SessionEducationalSubjects entity)
		{
			this.SendPropertyChanging();
			entity.EducationalSubjects = this;
		}
		
		private void detach_SessionEducationalSubjects(SessionEducationalSubjects entity)
		{
			this.SendPropertyChanging();
			entity.EducationalSubjects = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Examiners")]
	public partial class Examiners : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FullName;
		
		private EntitySet<EducationalSubjects> _EducationalSubjects;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    #endregion
		
		public Examiners()
		{
			this._EducationalSubjects = new EntitySet<EducationalSubjects>(new Action<EducationalSubjects>(this.attach_EducationalSubjects), new Action<EducationalSubjects>(this.detach_EducationalSubjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(MAX)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examiners_EducationalSubjects", Storage="_EducationalSubjects", ThisKey="Id", OtherKey="ExamainersId")]
		public EntitySet<EducationalSubjects> EducationalSubjects
		{
			get
			{
				return this._EducationalSubjects;
			}
			set
			{
				this._EducationalSubjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EducationalSubjects(EducationalSubjects entity)
		{
			this.SendPropertyChanging();
			entity.Examiners = this;
		}
		
		private void detach_EducationalSubjects(EducationalSubjects entity)
		{
			this.SendPropertyChanging();
			entity.Examiners = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Groups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _SpecialtyId;
		
		private EntitySet<Sessions> _Sessions;
		
		private EntitySet<Students> _Students;
		
		private EntityRef<Specialtys> _Specialtys;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSpecialtyIdChanging(System.Nullable<int> value);
    partial void OnSpecialtyIdChanged();
    #endregion
		
		public Groups()
		{
			this._Sessions = new EntitySet<Sessions>(new Action<Sessions>(this.attach_Sessions), new Action<Sessions>(this.detach_Sessions));
			this._Students = new EntitySet<Students>(new Action<Students>(this.attach_Students), new Action<Students>(this.detach_Students));
			this._Specialtys = default(EntityRef<Specialtys>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialtyId", DbType="Int")]
		public System.Nullable<int> SpecialtyId
		{
			get
			{
				return this._SpecialtyId;
			}
			set
			{
				if ((this._SpecialtyId != value))
				{
					if (this._Specialtys.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialtyIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialtyId = value;
					this.SendPropertyChanged("SpecialtyId");
					this.OnSpecialtyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_Sessions", Storage="_Sessions", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<Sessions> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_Students", Storage="_Students", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<Students> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialtys_Groups", Storage="_Specialtys", ThisKey="SpecialtyId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
		public Specialtys Specialtys
		{
			get
			{
				return this._Specialtys.Entity;
			}
			set
			{
				Specialtys previousValue = this._Specialtys.Entity;
				if (((previousValue != value) 
							|| (this._Specialtys.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specialtys.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._Specialtys.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._SpecialtyId = value.Id;
					}
					else
					{
						this._SpecialtyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Specialtys");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sessions(Sessions entity)
		{
			this.SendPropertyChanging();
			entity.Groups = this;
		}
		
		private void detach_Sessions(Sessions entity)
		{
			this.SendPropertyChanging();
			entity.Groups = null;
		}
		
		private void attach_Students(Students entity)
		{
			this.SendPropertyChanging();
			entity.Groups = this;
		}
		
		private void detach_Students(Students entity)
		{
			this.SendPropertyChanging();
			entity.Groups = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SessionEducationalSubjects")]
	public partial class SessionEducationalSubjects : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _SessionId;
		
		private System.Nullable<int> _EducationalSubjectId;
		
		private System.DateTime _Date;
		
		private EntitySet<StudentResults> _StudentResults;
		
		private EntityRef<EducationalSubjects> _EducationalSubjects;
		
		private EntityRef<Sessions> _Sessions;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSessionIdChanging(System.Nullable<int> value);
    partial void OnSessionIdChanged();
    partial void OnEducationalSubjectIdChanging(System.Nullable<int> value);
    partial void OnEducationalSubjectIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public SessionEducationalSubjects()
		{
			this._StudentResults = new EntitySet<StudentResults>(new Action<StudentResults>(this.attach_StudentResults), new Action<StudentResults>(this.detach_StudentResults));
			this._EducationalSubjects = default(EntityRef<EducationalSubjects>);
			this._Sessions = default(EntityRef<Sessions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int")]
		public System.Nullable<int> SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Sessions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EducationalSubjectId", DbType="Int")]
		public System.Nullable<int> EducationalSubjectId
		{
			get
			{
				return this._EducationalSubjectId;
			}
			set
			{
				if ((this._EducationalSubjectId != value))
				{
					if (this._EducationalSubjects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEducationalSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._EducationalSubjectId = value;
					this.SendPropertyChanged("EducationalSubjectId");
					this.OnEducationalSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SessionEducationalSubjects_StudentResults", Storage="_StudentResults", ThisKey="Id", OtherKey="SessionEducationalSubjectId")]
		public EntitySet<StudentResults> StudentResults
		{
			get
			{
				return this._StudentResults;
			}
			set
			{
				this._StudentResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EducationalSubjects_SessionEducationalSubjects", Storage="_EducationalSubjects", ThisKey="EducationalSubjectId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
		public EducationalSubjects EducationalSubjects
		{
			get
			{
				return this._EducationalSubjects.Entity;
			}
			set
			{
				EducationalSubjects previousValue = this._EducationalSubjects.Entity;
				if (((previousValue != value) 
							|| (this._EducationalSubjects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EducationalSubjects.Entity = null;
						previousValue.SessionEducationalSubjects.Remove(this);
					}
					this._EducationalSubjects.Entity = value;
					if ((value != null))
					{
						value.SessionEducationalSubjects.Add(this);
						this._EducationalSubjectId = value.Id;
					}
					else
					{
						this._EducationalSubjectId = default(Nullable<int>);
					}
					this.SendPropertyChanged("EducationalSubjects");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sessions_SessionEducationalSubjects", Storage="_Sessions", ThisKey="SessionId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
		public Sessions Sessions
		{
			get
			{
				return this._Sessions.Entity;
			}
			set
			{
				Sessions previousValue = this._Sessions.Entity;
				if (((previousValue != value) 
							|| (this._Sessions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sessions.Entity = null;
						previousValue.SessionEducationalSubjects.Remove(this);
					}
					this._Sessions.Entity = value;
					if ((value != null))
					{
						value.SessionEducationalSubjects.Add(this);
						this._SessionId = value.Id;
					}
					else
					{
						this._SessionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Sessions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentResults(StudentResults entity)
		{
			this.SendPropertyChanging();
			entity.SessionEducationalSubjects = this;
		}
		
		private void detach_StudentResults(StudentResults entity)
		{
			this.SendPropertyChanging();
			entity.SessionEducationalSubjects = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sessions")]
	public partial class Sessions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _GroupId;
		
		private int _SessionNumber;
		
		private EntitySet<SessionEducationalSubjects> _SessionEducationalSubjects;
		
		private EntityRef<Groups> _Groups;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGroupIdChanging(System.Nullable<int> value);
    partial void OnGroupIdChanged();
    partial void OnSessionNumberChanging(int value);
    partial void OnSessionNumberChanged();
    #endregion
		
		public Sessions()
		{
			this._SessionEducationalSubjects = new EntitySet<SessionEducationalSubjects>(new Action<SessionEducationalSubjects>(this.attach_SessionEducationalSubjects), new Action<SessionEducationalSubjects>(this.detach_SessionEducationalSubjects));
			this._Groups = default(EntityRef<Groups>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int")]
		public System.Nullable<int> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Groups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionNumber", DbType="Int NOT NULL")]
		public int SessionNumber
		{
			get
			{
				return this._SessionNumber;
			}
			set
			{
				if ((this._SessionNumber != value))
				{
					this.OnSessionNumberChanging(value);
					this.SendPropertyChanging();
					this._SessionNumber = value;
					this.SendPropertyChanged("SessionNumber");
					this.OnSessionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sessions_SessionEducationalSubjects", Storage="_SessionEducationalSubjects", ThisKey="Id", OtherKey="SessionId")]
		public EntitySet<SessionEducationalSubjects> SessionEducationalSubjects
		{
			get
			{
				return this._SessionEducationalSubjects;
			}
			set
			{
				this._SessionEducationalSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_Sessions", Storage="_Groups", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
		public Groups Groups
		{
			get
			{
				return this._Groups.Entity;
			}
			set
			{
				Groups previousValue = this._Groups.Entity;
				if (((previousValue != value) 
							|| (this._Groups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Groups.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._Groups.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Groups");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SessionEducationalSubjects(SessionEducationalSubjects entity)
		{
			this.SendPropertyChanging();
			entity.Sessions = this;
		}
		
		private void detach_SessionEducationalSubjects(SessionEducationalSubjects entity)
		{
			this.SendPropertyChanging();
			entity.Sessions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Specialtys")]
	public partial class Specialtys : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Groups> _Groups;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Specialtys()
		{
			this._Groups = new EntitySet<Groups>(new Action<Groups>(this.attach_Groups), new Action<Groups>(this.detach_Groups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialtys_Groups", Storage="_Groups", ThisKey="Id", OtherKey="SpecialtyId")]
		public EntitySet<Groups> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Groups(Groups entity)
		{
			this.SendPropertyChanging();
			entity.Specialtys = this;
		}
		
		private void detach_Groups(Groups entity)
		{
			this.SendPropertyChanging();
			entity.Specialtys = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentResults")]
	public partial class StudentResults : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _StudentId;
		
		private System.Nullable<int> _SessionEducationalSubjectId;
		
		private string _Mark;
		
		private EntityRef<SessionEducationalSubjects> _SessionEducationalSubjects;
		
		private EntityRef<Students> _Students;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStudentIdChanging(System.Nullable<int> value);
    partial void OnStudentIdChanged();
    partial void OnSessionEducationalSubjectIdChanging(System.Nullable<int> value);
    partial void OnSessionEducationalSubjectIdChanged();
    partial void OnMarkChanging(string value);
    partial void OnMarkChanged();
    #endregion
		
		public StudentResults()
		{
			this._SessionEducationalSubjects = default(EntityRef<SessionEducationalSubjects>);
			this._Students = default(EntityRef<Students>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int")]
		public System.Nullable<int> StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionEducationalSubjectId", DbType="Int")]
		public System.Nullable<int> SessionEducationalSubjectId
		{
			get
			{
				return this._SessionEducationalSubjectId;
			}
			set
			{
				if ((this._SessionEducationalSubjectId != value))
				{
					if (this._SessionEducationalSubjects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionEducationalSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SessionEducationalSubjectId = value;
					this.SendPropertyChanged("SessionEducationalSubjectId");
					this.OnSessionEducationalSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark", DbType="NVarChar(MAX)")]
		public string Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				if ((this._Mark != value))
				{
					this.OnMarkChanging(value);
					this.SendPropertyChanging();
					this._Mark = value;
					this.SendPropertyChanged("Mark");
					this.OnMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SessionEducationalSubjects_StudentResults", Storage="_SessionEducationalSubjects", ThisKey="SessionEducationalSubjectId", OtherKey="Id", IsForeignKey=true)]
		public SessionEducationalSubjects SessionEducationalSubjects
		{
			get
			{
				return this._SessionEducationalSubjects.Entity;
			}
			set
			{
				SessionEducationalSubjects previousValue = this._SessionEducationalSubjects.Entity;
				if (((previousValue != value) 
							|| (this._SessionEducationalSubjects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SessionEducationalSubjects.Entity = null;
						previousValue.StudentResults.Remove(this);
					}
					this._SessionEducationalSubjects.Entity = value;
					if ((value != null))
					{
						value.StudentResults.Add(this);
						this._SessionEducationalSubjectId = value.Id;
					}
					else
					{
						this._SessionEducationalSubjectId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SessionEducationalSubjects");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_StudentResults", Storage="_Students", ThisKey="StudentId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.StudentResults.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.StudentResults.Add(this);
						this._StudentId = value.Id;
					}
					else
					{
						this._StudentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Students : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FullName;
		
		private string _Gender;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private System.Nullable<int> _GroupId;
		
		private EntitySet<StudentResults> _StudentResults;
		
		private EntityRef<Groups> _Groups;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnGroupIdChanging(System.Nullable<int> value);
    partial void OnGroupIdChanged();
    #endregion
		
		public Students()
		{
			this._StudentResults = new EntitySet<StudentResults>(new Action<StudentResults>(this.attach_StudentResults), new Action<StudentResults>(this.detach_StudentResults));
			this._Groups = default(EntityRef<Groups>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(MAX)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(MAX)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int")]
		public System.Nullable<int> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Groups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_StudentResults", Storage="_StudentResults", ThisKey="Id", OtherKey="StudentId")]
		public EntitySet<StudentResults> StudentResults
		{
			get
			{
				return this._StudentResults;
			}
			set
			{
				this._StudentResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_Students", Storage="_Groups", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
		public Groups Groups
		{
			get
			{
				return this._Groups.Entity;
			}
			set
			{
				Groups previousValue = this._Groups.Entity;
				if (((previousValue != value) 
							|| (this._Groups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Groups.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Groups.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Groups");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentResults(StudentResults entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_StudentResults(StudentResults entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
	}
}
#pragma warning restore 1591
